<button class="page-indicator" disabled>Page NA of NA</button>
<button class="nav-button" id="previous-page">Previous Page</button>
<button class="nav-button" id="next-page">Next Page</button>
<input type="text" />
<button class="nav-button" id="go-button">Go</button>
<div id="pdf-element">Loading PDF Document</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.js"></script>
<script>
    let pageNumber = 1;
    let maxNumPages = 0;
    const pdfUrl = '/get-pdf/<%= fileName %>';
    let pdfBuffer;
    let scale = 0.8;
    let initialResize = false;

    // This function updates the PDF scale and viewport based on container width
    const resizePDF = (pdf) => {
        const container = document.getElementById('pdf-element');
        if (container) {
            // Assume we want to fit the PDF width to the container's width
            const containerWidth = container.clientWidth;
            const canvas = container.querySelector('canvas');

            if (canvas) {
                // Get the first page to calculate scale based on container width
                pdf.getPage(1).then((page) => {
                    const viewport = page.getViewport({ scale: 1 });
                    const desiredWidth = containerWidth;
                    scale = desiredWidth / viewport.width;

                    showPDFPage(pdf, pageNumber);
                });
            }
        }
    };

    const renderPage = (page, container) => {
        const viewport = page.getViewport({ scale: scale });
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');

        if (!context) {
            console.error('Unable to get 2D context from canvas');
            return;
        }

        canvas.height = viewport.height;
        canvas.width = viewport.width;
        container.innerHTML = ''; // Clear any existing content
        container.appendChild(canvas);

        const renderContext = {
            canvasContext: context,
            viewport: viewport
        };

        page.render(renderContext).promise.then(() => {
            if (!initialResize) {
                resizePDF(pdfBuffer);
                initialResize = true;
            }
        });
    }

    const showPDFPage = (pdf, pageNumber) => {

        const container =
            document.getElementById('pdf-element');

        if (!container) {
            console.error('Unable to find the container to append the canvas to');
            return;
        }

        pdf.getPage(pageNumber).then((page) => {
            renderPage(page, container);
        });
    };

    pdfjsLib.getDocument(pdfUrl).promise.then(function (pdf) {
        pdfBuffer = pdf;
        maxNumPages = pdf.numPages;
        showPDFPage(pdf, pageNumber);
        window.addEventListener('resize', () => resizePDF(pdfBuffer));
    });

    //Next Page
    document.getElementById('next-page').addEventListener('click', async function () {
        if (pageNumber < maxNumPages) {
            pageNumber += 1;
            showPDFPage(pdfBuffer, pageNumber);
        }
        else {
            alert("Not a valid page number")
        }
    });

    //Previous Page
    document.getElementById('previous-page').addEventListener('click', async function () {
        if (pageNumber > 1) {
            pageNumber -= 1;
            showPDFPage(pdfBuffer, pageNumber);
        }
        else {
            alert("Not a valid page number")
        }
    });

    //Go button
    document.getElementById('go-button').addEventListener('click', async function () {
        let inputPage = parseInt(document.getElementById('input-page').value);

        // check if input is a number and within range
        if (!isNaN(inputPage) && inputPage > 0 && inputPage <= maxNumPages) {
            pageNumber = inputPage;
            showPDFPage(pdfBuffer, pageNumber);
        }
        else {
            alert("Not a valid page number");
        }
    });

    // Call the function with the buffer and page number
    // showPDFPage(pdfBuffer, pageNumber);

</script>